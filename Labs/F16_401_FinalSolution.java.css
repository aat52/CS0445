import java.io.*;
import java.util.*;

public class F16_401_Final
{
	public static void main( String args[] ) throws Exception
	{
		BufferedReader infile1 = new BufferedReader( new FileReader( args[0] ) );
		BufferedReader infile2 = new BufferedReader( new FileReader( args[1] ) );

		String[] set1 = loadSet( infile1 );
		Arrays.sort( set1 );
		String[] set2 = loadSet( infile2 );
		Arrays.sort( set2 );
		printSet( "set1: ",set1 );
		printSet( "set2: ",set2 );

		String[] union = union( set1, set2 );
		Arrays.sort( union );
		printSet( "\nunion: ", union );


		String[] intersection = intersection( set1, set2 );
		Arrays.sort( intersection );
		printSet( "\nintersection: ",intersection );

		String[] difference = difference( set1, set2 );
		Arrays.sort( difference );
		printSet( "\ndifference: ",difference );

		String[] xor = xor( set1, set2 );
		Arrays.sort( xor );
		printSet("\nxor: ", xor );

		System.out.println( "\nSets Echoed after operations.");

		printSet( "set1: ", set1 );
		printSet( "set2: ", set2 );

	}// END MAIN

	// You must dimension the set to be of length 5, then as it fills up double its length.
	// Just before returning the array you must trim it to be the same as the count.

	static String[] loadSet( BufferedReader infile ) throws Exception
	{
		final int INITIAL_LENGTH = 5;
		int cnt=0;
		String[] set = new String[INITIAL_LENGTH];
		while( infile.ready() )
		{
				if (cnt >= set.length)
					set = upSize( set );
				set[ cnt++ ] = infile.readLine();
		}
		infile.close();
		return downSize( set, cnt );
	}
    
    static void printSet( String caption, String [] set )
	{
		System.out.print( caption );
		for ( String s : set )
			System.out.print( s + " " );
		System.out.println();
	}

	/* ###############################################################
		For each of the following set operations you must execute the following steps:
		1) dimension an array that is big enough to handle the largest possible set for that operation.
		   do not use a literal constant as the original dimension.
		2) add the appropriate elements to the array as the operation prescribes.
		3) before returning the array, resize it to the exact size as the number of elements in it.
		4) There is no count to pass around so the length must be equal to the actual count.
	*/

	static String[] union( String[] set1, String[] set2 )
	{
		String[] union = new String[set1.length + set2.length];
		int cnt=0;

		// first add in all the elems from set1
		for (String s : set1 )
			union[cnt++] = s;

		// now add in any elems from set2 that are NOT in set1
		for ( String s: set2 ) // for each elem s in set2
			if ( !contains( set1, s ) ) // if set2 does not contain s then add s to the union
				union[cnt++] = s;

		return downSize( union, cnt ); // trim the array to the number of elements in it
	}

	static String[] intersection( String[] set1, String[] set2 )
	{
		int max = set1.length;
		if (set2.length > max) max = set2.length;

		String[] intersection = new String[ max ];
		int cnt=0;

		for ( String s : set1 )
			 if ( contains( set2, s ) )
			 	intersection[cnt++] = s;

		return downSize( intersection, cnt ); // trim the array to the number of elements in it
	}

	static String[] difference( String[] set1, String[] set2 )
	{
		String[] difference = new String[ set1.length ];
		int cnt=0;

		for ( String s : set1 )
			 if ( !contains( set2, s ) )
			 	difference[cnt++] = s;

		return downSize( difference, cnt ); // trim the array to the number of elements in it
	}

		// A HELPER METHOD THAT YOU *SHOULD* WRITE AND CALL RATHER THAN WRITE LOOPs IN PLACE
	static boolean contains( String[] set, String s )
	{
		for ( String z : set )
			if (z.equals(s)) return true;

		return false;
	}
	

	static String[] xor( String[] set1, String[] set2 )
	{
		return difference( union(set1,set2) ,intersection(set1,set2) );
	}

	

	static String[] upSize( String[] old )
	{
		String[] upsizedArr = new String[old.length * 2];
		for ( int i=0 ; i< old.length ; ++i )
			upsizedArr[i] = old[i];
		return upsizedArr;
	}

	// return an array of length  == count with all data from the old array stored in the new array
	static String[] downSize( String[] old, int cnt )
	{
		String[] downsizedArr = new String[cnt];
		for (int i=0 ; i<cnt ; ++i)
			downsizedArr[i] = old[i];
		return downsizedArr;
	}

	
} // END CLASS